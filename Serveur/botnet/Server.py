import socket
import threading


class Server:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.server_socket = None
        self.clients = []
        self.running = False

    def mainMenu(self):
        while True:
            print("Welcome to the server")
            print("1. Start Server")
            print("2. Stop Server")
            print("3. Display Connected Clients")
            print("4. Exit")
            try:
                choice = int(input("Enter your choice: "))
                if choice == 1:
                    self.start_server()
                elif choice == 2:
                    self.stop_server()
                elif choice == 3:
                    self.display_clients()
                elif choice == 4:
                    break
                else:
                    print("Invalid choice")
            except ValueError:
                print("Invalid choice")
            except KeyboardInterrupt:
                # Gracefully stop the server on keyboard interrupt (e.g., Ctrl+C)
                self.stop_server()
                break

    def socketServer(self):
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind((self.host, self.port))
        self.server_socket.listen(1)
        print(f"Waiting connections on {self.host}:{self.port}")

    def display_clients(self):
        print("Connected Clients:")
        for i, client in enumerate(self.clients, 1):
            clientAddress = client.getpeername()
            print(f"Client {i}: {clientAddress}")

    def handle_connection(self, client, clientAddress):
        # print(f"Connection from {clientAddress}")
        self.clients.append(client)
        try:
            while True:
                data = client.recv(1024)
                if not data:
                    # If the data is empty, the client has closed the connection
                    break
        except Exception as e:
            print(f"Error while receiving data: {e}")
        finally:
            # Close the client socket when done
            print(f"{clientAddress} Log-out")
            client.close()
            self.clients.remove(client)

    def start_server(self):
        if not self.running:
            self.socketServer()
            self.running = True
            server_thread = threading.Thread(
                target=self.listen_for_connections)
            server_thread.start()

    def listen_for_connections(self):
        while self.running:
            try:
                client, clientAddress = self.server_socket.accept()
                # Start a new thread to handle the connection
                connection_thread = threading.Thread(
                    target=self.handle_connection, args=(client, clientAddress))
                connection_thread.start()
            except KeyboardInterrupt:
                # Gracefully stop the server on keyboard interrupt (e.g., Ctrl+C)
                self.running = False
                self.server_socket.close()

    def stop_server(self):
        if self.running:
            # Use this method to stop the server gracefully
            self.running = False
            if self.server_socket:
                self.server_socket.close()
                self.server_socket = None


serv = Server("192.168.1.1", 1337)
serv.mainMenu()
